from physrisk.kernel.events import HighTemperature
from typing import List
from physrisk.kernel import Asset, PowerGeneratingAsset, Inundation, VulnerabilityModel
from physrisk.kernel import AssetEventDistribution, VulnerabilityDistrib
from physrisk.data import EventDataRequest

class InnundationModel(VulnerabilityModel):
    __asset_types = [PowerGeneratingAsset]
    __event_types = [Inundation]
    
    def __init__(self, assets: List[Asset]):
        # Notion of a model calibration that is stored resource? For this example we hard-code:
        self.__inundation_dist = None #VulnerabilityDistribution(Inundation, [0, 1], [0, 1])
        pass

    @staticmethod
    def applies_to(asset: PowerGeneratingAsset):
        # model applies to any PowerGeneratingAsset
        return True

    @staticmethod
    def event_data_request(asset: Asset):
        # assuming here that other specific look-ups wold be needed
        return EventDataRequest(Inundation, asset.latitude, asset.longitude) 

    def get_asset_event_distribution(self, event_data_response):
        # use distribution as-is
        return event_data_response.distribution

    def get_vulnerability_distributions(self, event_type, asset):
        # would be nice to use match (pattern matching) here       
        if event_type == Inundation:
            return self.__inundation_dist
        else:
            raise NotImplementedError() 
